<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Codecs on Krishna Bhamidipati</title>
        <link>http://localhost:1313/tags/codecs/</link>
        <description>Recent content in Codecs on Krishna Bhamidipati</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 15 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/codecs/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Lossless Trimming of XAVC-S with PlayMemories</title>
        <link>http://localhost:1313/post/video/2020/lossless-trim-with-play-memories/</link>
        <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/video/2020/lossless-trim-with-play-memories/</guid>
        <description>&lt;h2 id=&#34;why-trim&#34;&gt;Why Trim
&lt;/h2&gt;&lt;p&gt;Sometimes it&amp;rsquo;s a live gig and I&amp;rsquo;m doing multiple things, like camera and sound. Throw in some stage delays and out of a 56 minute clip, half is not needed. On a Sony AX100 shooting at 1080p XAVCS 30fps, that&amp;rsquo;s 11 out of 22 GB extra.&lt;/p&gt;
&lt;p&gt;Now if space isn&amp;rsquo;t a concern then no need to read the rest of this.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; But in practice there are cases when this is a real use case for me.&lt;/p&gt;
&lt;p&gt;The challenge of course is how to trim the file losslessly. Yes there&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://github.com/mifi/lossless-cut&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Lossless Cut&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://www.fame-ring.com/smart_cutter.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FameRing SmartCutter&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;http://simplemoviex.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SimpleMovieX&lt;/a&gt; and other similar apps, but the reality is after trying these programs the MP4 container seems so vast and varied that prosumer formats aren&amp;rsquo;t properly supported by these third party tools.&lt;/p&gt;
&lt;h2 id=&#34;hello-playmemories&#34;&gt;Hello PlayMemories
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2020/lossless-trim-with-play-memories/playmemories-trim-1.png&#34;
	width=&#34;932&#34;
	height=&#34;674&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;331px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Sony actually makes a free app called &lt;a class=&#34;link&#34; href=&#34;https://support.d-imaging.sony.co.jp/www/disoft/int/download/playmemories-home/mac/en/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PlayMemories Home&lt;/a&gt;. The UI is a little clunky, exports are single threaded, and I can&amp;rsquo;t choose the output directory of the destination file. However, at the end of the day, this is an application I can trust to trim files from the SD card—and do it well. No keyframe issues, no risk.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2020/lossless-trim-with-play-memories/playmemories-trim-2.png&#34;
	width=&#34;1468&#34;
	height=&#34;784&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;449px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;slow-but-useful&#34;&gt;Slow But Useful
&lt;/h2&gt;&lt;p&gt;At the end of the day, using PlayMemories to trim footage is slow and thus challenging to fold into a normal ingest workflow. However, when occassion warrants its use, it will get the job done without error.&lt;/p&gt;
&lt;h2 id=&#34;footnotes&#34;&gt;Footnotes
&lt;/h2&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Of course, if you&amp;rsquo;re making a highlight reel then losing part of the performance doesn&amp;rsquo;t matter either.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>How to Add Timecode to MP4 Files</title>
        <link>http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/</link>
        <pubDate>Sun, 24 Jan 2016 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/</guid>
        <description>&lt;h2 id=&#34;where-has-timecode-gone&#34;&gt;Where Has Timecode Gone?
&lt;/h2&gt;&lt;p&gt;Newer, prosumer codecs these days like Sony XAVC-S don&amp;rsquo;t seem to record video with timecode. It&amp;rsquo;s one of the chief drawbacks that knocks the otherwise brilliant Sony AX100 from solid professional use. Timecode tracks can save mountains of time when editing multicamera shots, relinking media files, trimming clips precisely and so on—which, ostensibly, most home video footage won&amp;rsquo;t call upon.&lt;/p&gt;
&lt;p&gt;Prosumer camera codecs like AVCHD and XAVC-S write H.264 video in MP4 containers. H.264 is a compressed video format originally intended for delivery, not editing, but its role has slowly evolved. Prosumer cameras really benefit from the compression because then 4 hrs of 4K can still fit on a 128 GB SD card.&lt;/p&gt;
&lt;p&gt;MP4 containers don&amp;rsquo;t traditionally support timecode which may help to explain why the recent trend in dropping timecode. Although &lt;a class=&#34;link&#34; href=&#34;https://developer.apple.com/library/mac/technotes/tn2174/_index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Apple supports timecode in MP4 containers&lt;/a&gt; since 2013, &lt;a class=&#34;link&#34; href=&#34;https://www.digitalrebellion.com/blog/posts/how_to_create_timecode_tracks_for_h.264_movies_in_compressor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;other software may exhibit side-effects reading timecode-rich MP4s&lt;/a&gt; if they do not expect it.&lt;/p&gt;
&lt;h2 id=&#34;mov-to-the-rescue&#34;&gt;MOV to the Rescue
&lt;/h2&gt;&lt;p&gt;MOV containers are like the Swiss army knife of containers. Unlike MP4, MOV supports timecode tracks full out, and rewrapping from MP4 to MOV can be done in a number of ways! But which are robust and which go bust?&lt;/p&gt;
&lt;p&gt;Short answer: EditReady is the most robust rewrapper out there, and can even be scripted from the command line. Read on for the details and why others didn&amp;rsquo;t cut it (no pun intended).&lt;/p&gt;
&lt;h2 id=&#34;the-setup&#34;&gt;The Setup
&lt;/h2&gt;&lt;p&gt;The following tests were performed using AVCHD files already in MOV format as imported on a MBP with Photos. They however, did not have timecode.&lt;/p&gt;
&lt;p&gt;After timecode was added to the MOV container, the file was opened with QuickTime Player 7 and Compressor 4 to verify timecode. The file was then transcoded with Compressor to check its integrity.&lt;/p&gt;
&lt;h2 id=&#34;editready-lives-up-to-its-name&#34;&gt;EditReady Lives up to Its Name
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.divergentmedia.com/editready&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;EditReady&lt;/a&gt; is a champion at rewrapping footage. Divergent Media makes excellent products and their customer service is bar none. When I had written regarding the ghost render, Colin at Divergent Media explained:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compressor isn&amp;rsquo;t good at recovering from bad frames, so that&amp;rsquo;s the mostly likely problem. You hit one bad segment and it just gives up. EditReady is a little better about moving past those segments. It could have been a bad SD card or something during the original shoot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;EditReady&amp;rsquo;s algorithms can correct this, so it&amp;rsquo;s really the most versatile program out there. Rewrapping with EditReady makes Compressor super, super happy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/edit-ready-rewrap-window.png&#34;
	width=&#34;750&#34;
	height=&#34;509&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;353px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;EditReady&amp;rsquo;s rewrap affected the FCP X date at first, but turns out it was because there were conflicting dates inside the container&amp;rsquo;s metadata!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/rewrap-editready-file-dates.png&#34;
	width=&#34;756&#34;
	height=&#34;113&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;669&#34;
		data-flex-basis=&#34;1605px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;EditReady&amp;rsquo;s Metadata window calls this to your attention and allows you to select and/or set which date you would like.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/editready-metadata-date-conflict-resolution.gif&#34;
	width=&#34;726&#34;
	height=&#34;457&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can see the original file does not have any timecode. By default, EditReady will preserve timecode if present, but not generate it if absent on the original. However, clicking the + icon in the upper right allows one to add a timecode tag as well! (By default, if the field is blank, timecode will start at &lt;code&gt;00:00:00:00&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/editready-metadata-add-timecode.gif&#34;
	width=&#34;726&#34;
	height=&#34;457&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The size of the rewrapped, timecode footage is the same within a few bytes. Strangely enough, QuickTime Player 7 did crash a few times when scrubbing both.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/timecode-test-original-stats.png&#34;
	width=&#34;299&#34;
	height=&#34;384&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;77&#34;
		data-flex-basis=&#34;186px&#34;
	
&gt;
&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/editready-rewrap-stats.png&#34;
	width=&#34;299&#34;
	height=&#34;382&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;78&#34;
		data-flex-basis=&#34;187px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The rewrapped video however was larger in the number of frames: without timecode generation, it was &lt;code&gt;159165&lt;/code&gt; frames instead of &lt;code&gt;159164&lt;/code&gt; and with timecode it was &lt;code&gt;159166&lt;/code&gt;. Thinking this might have been the potential missing frame correction, I checked against another clip that rendered properly in Compressor, but the EditReady rewrap (without timecode) was again greater in frames: &lt;code&gt;174150&lt;/code&gt; vs &lt;code&gt;174149&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/rewrap-original-frame-count.png&#34;
	width=&#34;1008&#34;
	height=&#34;422&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;238&#34;
		data-flex-basis=&#34;573px&#34;
	
&gt;
&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/editready-rewrap-one-extra-frame.png&#34;
	width=&#34;999&#34;
	height=&#34;440&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;227&#34;
		data-flex-basis=&#34;544px&#34;
	
&gt;
&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/editready-rewrap-two-extra-frames.png&#34;
	width=&#34;1021&#34;
	height=&#34;442&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;230&#34;
		data-flex-basis=&#34;554px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;While the cause is unknown (roundoff error maybe?), the implication of the change in number of frames is clear: rewrapping footage will make relinking offline media a nightmare! Attempting to relink the timecode version with the original brings this lovely dialog:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/editready-rewrap-frame-change-relinking.png&#34;
	width=&#34;532&#34;
	height=&#34;324&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;394px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Thus, always rewrap footage first before beginning editing.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;At the end of the day, EditReady is the most reliable way of rewrapping and adding timecode to any footage. Repairing even small nicks from original footage, it serves a a trustworthy partner in the initial post-processing logging and transfer workflow.&lt;/p&gt;
&lt;h2 id=&#34;appendix-the-b-list&#34;&gt;Appendix: The &amp;ldquo;B&amp;rdquo; List
&lt;/h2&gt;&lt;p&gt;Sometimes &amp;ldquo;B&amp;rdquo; is generous. Here&amp;rsquo;s what doesn&amp;rsquo;t work.&lt;/p&gt;
&lt;h3 id=&#34;ffmpeg-woes&#34;&gt;ffmpeg Woes
&lt;/h3&gt;&lt;p&gt;ffmpeg is the open source king for video compression. Many programs like Handbrake are built on it, so I was excited to learn it can add timecode as well! To rewrap a container with timecode the syntax is like so:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -i Day_1.mov -codec copy -timecode 04:25:50.00 Day_1.ffmpeg.mov&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note: the timecode seems to be automatically calculated based on the framerate of the video track. Also, by default, ffmpeg only preserves 1 video and 1 audio track.&lt;/p&gt;
&lt;p&gt;While ffmpeg successfully added timecode, the resulting file was a disaster for editing. The file systematically quits @ 20 seconds on any render in Compressor, suggesting some kind of container corruption.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/timecode-ffmpeg-compressor-fail.png&#34;
	width=&#34;979&#34;
	height=&#34;321&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Timecode added by ffmpeg fails to render with Compressor&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;304&#34;
		data-flex-basis=&#34;731px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Furthermore, although the file did play in QuickTime Player X and QuickTime Player 7, &lt;strong&gt;scrubbing the playhead sometimes caused the application to crash&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/timecode-ffmpeg-qt7-scrubbing-fail.png&#34;
	width=&#34;632&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Timecode added by ffmpeg crashes during QT7 scrubbing&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;168&#34;
		data-flex-basis=&#34;404px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The file crashed when scrubbing in Compressor as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/timecode-ffmpeg-compressor42-scrubbing-fail.png&#34;
	width=&#34;632&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Cannot scrub ffmped rewrapped file&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;168&#34;
		data-flex-basis=&#34;404px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Lastly, the first frame is often black. Note in particular the strange, red vertical lines in Compressor&amp;rsquo;s preview window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/timecode-ffmpeg-compressor-black-screen.png&#34;
	width=&#34;1436&#34;
	height=&#34;724&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Black opening frame in Compressor&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;476px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In a way, ffmpeg is a video delivery king, but perhaps not an editing king.&lt;/p&gt;
&lt;h3 id=&#34;videotoolshed-mp4-to-quicktime&#34;&gt;VideoToolShed MP4 to QuickTime
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.videotoolshed.com/product/66/mp4-to-quicktime/3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Videotoolshed&amp;rsquo;s MP4 to QuickTime&lt;/a&gt; was another contender, but starting from version 6 the program uses ffmpeg under the hood, to increase compatibility with other programs. So it too exhibits the same problems and failed to render with Compressor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/timecode-mp4toqt61-compressor-fail.png&#34;
	width=&#34;979&#34;
	height=&#34;338&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Timecode added by mp4toqt61 fails to render with Compressor&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;289&#34;
		data-flex-basis=&#34;695px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Also, the VideoToolShed GUI is very rough around the edges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only detects MP4 files. So to add timecode to existing MOVs, the files first have to be renamed to trick the program to open them.&lt;/li&gt;
&lt;li&gt;When processing the program won&amp;rsquo;t come back to the foreground. Hovering with the mouse shows the little color pinwheel&amp;hellip;&lt;/li&gt;
&lt;li&gt;Files also can&amp;rsquo;t be dragged and dropped, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So ya, the little things—and some big things as well.&lt;/p&gt;
&lt;h3 id=&#34;cineplay&#34;&gt;CinePlay
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.digitalrebellion.com/cineplay/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CinePlay by Digital Rebellion&lt;/a&gt; is almost like QuickTime X Pro and could serve as a solid competitor to &lt;a class=&#34;link&#34; href=&#34;http://simplemoviex.com/SimpleMovieX/index.var&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SimpleMovieX&lt;/a&gt;. CinePlay offers numerous vital features for editing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Timecode display&lt;/li&gt;
&lt;li&gt;Text input of timecode location&lt;/li&gt;
&lt;li&gt;Add markers and annotations—including drawings! (Chapters not visible automatically in Compressor/FCP X, but can be exported to text files and imported manually)&lt;/li&gt;
&lt;li&gt;Set ins and outs (standard FCP7 keyboard shortcuts)&lt;/li&gt;
&lt;li&gt;Many others like video rotation, timecode and titlesafe overlays, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Moreover, CinePlay&amp;rsquo;s Export window offers a rewrapping option (&lt;a class=&#34;link&#34; href=&#34;https://www.digitalrebellion.com/blog/posts/rewrapping_mp4_to_mov_with_cineplay&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;see their own blog post here&lt;/a&gt;) which automatically adds NDF timecode starting at 00:00:00:00—perfect for changing MP4 containers to MOV. The process however cannot be scripted from the CLI, but could be, in principle, via AppleScript to queue multiple files for export at at time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/cineplay-rewrap-export.png&#34;
	width=&#34;712&#34;
	height=&#34;487&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;350px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The rewrapped MOV itself appears to have full structural integrity. No funny glitches and crashes when processing the file. It does however start with a black image sometimes—but unlike the ffmpeg one, this doesn&amp;rsquo;t show any funny red lines in Compressor&amp;rsquo;s preview window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/cineplay-black-screen-timecode-starts-at-zero.png&#34;
	width=&#34;1072&#34;
	height=&#34;759&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;338px&#34;
	
&gt;
&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/cineplay-compressor-black-screen.png&#34;
	width=&#34;1436&#34;
	height=&#34;780&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;184&#34;
		data-flex-basis=&#34;441px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It also passes the Compressor test: no crash at the lovely 20 second mark.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/cineplay-compressor-success.png&#34;
	width=&#34;1436&#34;
	height=&#34;808&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The rewrapped MOV is roughly the same size, within a few bytes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/timecode-test-original-stats.png&#34;
	width=&#34;299&#34;
	height=&#34;384&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;77&#34;
		data-flex-basis=&#34;186px&#34;
	
&gt;
&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/cineplay-rewrap-stats.png&#34;
	width=&#34;299&#34;
	height=&#34;371&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;80&#34;
		data-flex-basis=&#34;193px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;However, while the original was &lt;code&gt;159164&lt;/code&gt; frames, the rewrapped one is &lt;code&gt;159111&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/rewrap-original-frame-count.png&#34;
	width=&#34;1008&#34;
	height=&#34;422&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;238&#34;
		data-flex-basis=&#34;573px&#34;
	
&gt;
&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/cineplay-rewrap-missing-frames.png&#34;
	width=&#34;1009&#34;
	height=&#34;415&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;583px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The first setback is CinePlay changes the File Creation Date of the file (i.e. the one that&amp;rsquo;s read from &lt;code&gt;GetFileInfo&lt;/code&gt; from the Terminal) so the date in FCP X is changed from the original to the date of the rewrapping. Also note, though how the timecode duration &lt;em&gt;appears&lt;/em&gt; longer in FCP X. This I reckon is because the timecode track is NDF but the FR is 29.97, and/or some metadata is incorrect in CinePlay&amp;rsquo;s rewrap. (In Compressor, the last frame&amp;rsquo;s timecode is &lt;code&gt;01:28:23:21&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/rewrap-editready-file-dates.png&#34;
	width=&#34;756&#34;
	height=&#34;113&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;669&#34;
		data-flex-basis=&#34;1605px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Also, the frame rate of the rewrapped footage is no longer 29.97 but instead 30, as told to Compressor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/cineplay-changes-framerate-metadata.png&#34;
	width=&#34;1436&#34;
	height=&#34;920&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;374px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Another rather serious hiccup was&amp;hellip; the Compressor render never completed!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/rewrapping-and-adding-timecode-to-mp4s/cineplay-compressor-hang-bad-file.png&#34;
	width=&#34;1436&#34;
	height=&#34;836&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;412px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Turns out the original movie file I inherited was somehow corrupt. (Photos probably isn&amp;rsquo;t the best tool to import AVCHD footage.) Not CinePlay&amp;rsquo;s fault at all but it does knock it out of first place for fault tolerance!&lt;/p&gt;
&lt;h2 id=&#34;history&#34;&gt;History
&lt;/h2&gt;&lt;p&gt;&lt;em&gt;[Updated July 5, 2019 with wording and ordering changes.]&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Renaming MP4 to M4V to open with QT7 &amp; Compressor</title>
        <link>http://localhost:1313/post/video/2016/masquerading-mp4-files/</link>
        <pubDate>Sat, 09 Jan 2016 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/video/2016/masquerading-mp4-files/</guid>
        <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction
&lt;/h3&gt;&lt;p&gt;For a long time, Sony&amp;rsquo;s XAVC-S codec was completely a mystery to me. It was the new format the Sony CX900 and AX100 use, and when those cameras originally shipped, the files could not be edited natively with FCP X. (&lt;a class=&#34;link&#34; href=&#34;https://support.apple.com/en-us/HT202252&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Version 10.2 added that functionality&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;What was particularly perplexing was after the software update, QuickTime Player X and FCP X would open the files, but QuickTime Player 7 and Compressor 4.2 wouldn&amp;rsquo;t. QT7 was understandably written on legacy 32-bit frameworks&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but shouldn&amp;rsquo;t Compressor 4.2 use the same new 64-bit frameworks (AVFoundation, CoreMediaIO, etc.) that QT X and FCP X used?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/masquerading-mp4-files/xavcs-failure-qt7-open.png&#34;
	width=&#34;532&#34;
	height=&#34;265&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Sony XAVC-S MP4 file unrecognized by QuickTime Player 7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;481px&#34;
	
&gt;
&lt;img src=&#34;http://localhost:1313/post/video/2016/masquerading-mp4-files/xavcs-failure-streamclip-open-anyway.png&#34;
	width=&#34;833&#34;
	height=&#34;684&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;MPEG Streamclip further complains on Open Anyway&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;121&#34;
		data-flex-basis=&#34;292px&#34;
	
&gt;
&lt;img src=&#34;http://localhost:1313/post/video/2016/masquerading-mp4-files/xavcs-failure-compressor4-open.png&#34;
	width=&#34;1222&#34;
	height=&#34;950&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Sony XAVC-S MP4 file unrecognized by Compressor 4&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;308px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Invalid sample description&amp;rdquo; &amp;hellip; &amp;ldquo;can&amp;rsquo;t find video or audio tracks&amp;rdquo; &amp;hellip; very interesting. Almost suggests the programs can&amp;rsquo;t read some header metadata. Thanks to the folks folks at Divergent Media, now I know XAVC-S is just H.264 video inside the container.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; Should be no reason QT7 can&amp;rsquo;t open it.&lt;/p&gt;
&lt;p&gt;Indeed that&amp;rsquo;s the case!&lt;/p&gt;
&lt;h3 id=&#34;solution&#34;&gt;Solution
&lt;/h3&gt;&lt;p&gt;The fix? Rename the extension from &lt;code&gt;mp4&lt;/code&gt; to &lt;code&gt;m4v&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now QT7, Compressor 4, and MPEG Streamclip all open the file once again. Hooray!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/video/2016/masquerading-mp4-files/xavcs-success-qt7-m4v.png&#34;
	width=&#34;1072&#34;
	height=&#34;759&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Sony XAVC-S as M4V successfully recognized by QuickTime Player 7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;338px&#34;
	
&gt;
&lt;img src=&#34;http://localhost:1313/post/video/2016/masquerading-mp4-files/xavcs-success-streamclip-m4v.png&#34;
	width=&#34;805&#34;
	height=&#34;656&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Sony XAVC-S as M4V successfully recognized by MPEG Streamclip&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;122&#34;
		data-flex-basis=&#34;294px&#34;
	
&gt;
&lt;img src=&#34;http://localhost:1313/post/video/2016/masquerading-mp4-files/xavcs-success-compressor4-m4v.png&#34;
	width=&#34;1222&#34;
	height=&#34;978&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Sony XAVC-S as M4V successfully recognized by Compressor 4&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;299px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This means Final Cut Pro 7 will open such renamed files too, like QT7.&lt;/p&gt;
&lt;h3 id=&#34;but-why&#34;&gt;But Why?
&lt;/h3&gt;&lt;p&gt;Um, ya.&lt;/p&gt;
&lt;p&gt;My guess is, in the old days any file that ended in MP4 was thought to conform the MP4 standard. Makes sense, right? That implies the audio stream for MP4 files should be AAC, MP3 or a few other audio codecs.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; In that bucket list is &lt;em&gt;not&lt;/em&gt; PCM audio! This strict convention is what I surmise QT7 and Compressor 4.2 adhere to and therefore could not open the XAVC-S file from the video camera.&lt;/p&gt;
&lt;p&gt;The renaming hint came from a StackExchange&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; and FFMPEG page&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; after searching for the QT7 error message &lt;code&gt;An invalid sample description was found in the movie&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the OP&amp;rsquo;s case, a masquerading MP4 file contained both AAC and AC3 audio tracks—the latter which is not allowed per the MP4 spec. It&amp;rsquo;s interesting to note Handbrake (version 0.10.2 x86_64 (2015061100)) now automatically renames the destination file extension from &lt;code&gt;mp4&lt;/code&gt; to &lt;code&gt;m4v&lt;/code&gt; upon adding an AC3 audio track! It seems programs like VLC, which have always played the file, and now QT X and FCP X, probably do not give much importance to the actual file extension but instead to the stream data inside and are thus more lenient.&lt;/p&gt;
&lt;h3 id=&#34;m4v-is-like-apples-new-mov&#34;&gt;M4V is like Apple&amp;rsquo;s New MOV
&lt;/h3&gt;&lt;p&gt;Like the standard quicktime &lt;code&gt;mov&lt;/code&gt; container, &lt;code&gt;m4v&lt;/code&gt; seems to have more for flexibility for packaging MP4 streams—in this case, for PCM audio. After all, like &lt;code&gt;mov&lt;/code&gt;, the &lt;code&gt;m4v&lt;/code&gt; container is developed by Apple.&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;For a long time, I placed the emphasis on the &lt;strong&gt;v&lt;/strong&gt; of m4&lt;strong&gt;v&lt;/strong&gt;—that it&amp;rsquo;s MP4 &lt;strong&gt;v&lt;/strong&gt;ideo. But in a way, perhaps the emphasis is really on the &lt;strong&gt;4&lt;/strong&gt;: it&amp;rsquo;s like m&lt;strong&gt;o&lt;/strong&gt;v but just with the middle letter changed for mp&lt;strong&gt;4&lt;/strong&gt; files.&lt;/p&gt;
&lt;h3 id=&#34;appendix&#34;&gt;Appendix
&lt;/h3&gt;&lt;h4 id=&#34;xavc-s-sample-file&#34;&gt;XAVC-S sample file
&lt;/h4&gt;&lt;p&gt;For posterity! Original 50 MB video file from the Sony AX-100 camera available &lt;a class=&#34;link&#34; href=&#34;https://f000.backblazeb2.com/file/TripodVideoNinja/XAVCS-4K-29.97fps.MP4.zip&#34; &gt;here&lt;/a&gt; for download and experimentation.&lt;/p&gt;
&lt;p&gt;Audio credit: &lt;em&gt;Raga Pahadi - Alaap&lt;/em&gt; by Ashwin Batish from album &lt;a class=&#34;link&#34; href=&#34;https://player.spotify.com/album/0hAFpAvn7T1rAXD62ge5Ut&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;em&gt;Morning Meditation Ragas on Sitar&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;xavc-s-stream-info&#34;&gt;XAVC-S Stream Info
&lt;/h4&gt;&lt;p&gt;Stream information from the original 4K MP4 file from the Sony AX-100 using &lt;code&gt;ffprobe -show_streams&lt;/code&gt;. Note how the H.264 profile is &lt;em&gt;High&lt;/em&gt; but the audio is PCM 48 kHz 16-bit.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Krish-MBP-2012-en1:Desktop Krish$ ffprobe -show_streams XAVCS-4K-29.97fps.MP4
ffprobe version 2.8 Copyright (c) 2007-2015 the FFmpeg developers
  built with Apple LLVM version 6.1.0 (clang-602.0.53) (based on LLVM 3.6.0svn)
  configuration: --prefix=/usr/local/Cellar/ffmpeg/2.8 --enable-shared --enable-pthreads --enable-gpl --enable-version3 --enable-hardcoded-tables --enable-avresample --cc=clang --host-cflags= --host-ldflags= --enable-opencl --enable-libx264 --enable-libmp3lame --enable-libvo-aacenc --enable-libxvid --enable-vda
  libavutil      54. 31.100 / 54. 31.100
  libavcodec     56. 60.100 / 56. 60.100
  libavformat    56. 40.101 / 56. 40.101
  libavdevice    56.  4.100 / 56.  4.100
  libavfilter     5. 40.101 /  5. 40.101
  libavresample   2.  1.  0 /  2.  1.  0
  libswscale      3.  1.101 /  3.  1.101
  libswresample   1.  2.101 /  1.  2.101
  libpostproc    53.  3.100 / 53.  3.100
Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &amp;#39;XAVCS-4K-29.97fps.MP4&amp;#39;:
  Metadata:
    major_brand     : XAVC
    minor_version   : 16785407
    compatible_brands: XAVCmp42iso2
    creation_time   : 2016-01-09 00:44:11
  Duration: 00:00:07.01, start: 0.000000, bitrate: 55039 kb/s
    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709/bt709/iec61966-2-4), 3840x2160 [SAR 1:1 DAR 16:9], 53251 kb/s, 29.97 fps, 29.97 tbr, 30k tbn, 59.94 tbc (default)
    Metadata:
      creation_time   : 2016-01-09 00:44:11
      handler_name    : Video Media Handler
      encoder         : AVC Coding
    Stream #0:1(und): Audio: pcm_s16be (twos / 0x736F7774), 48000 Hz, 2 channels, s16, 1536 kb/s (default)
    Metadata:
      creation_time   : 2016-01-09 00:44:11
      handler_name    : Sound Media Handler
    Stream #0:2(und): Data: none (rtmd / 0x646D7472), 245 kb/s (default)
    Metadata:
      creation_time   : 2016-01-09 00:44:11
      handler_name    : Non-Real Time Metadata
Unsupported codec with id 0 for input stream 2
[STREAM]
index=0
codec_name=h264
codec_long_name=H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
profile=High
codec_type=video
codec_time_base=1001/60000
codec_tag_string=avc1
codec_tag=0x31637661
width=3840
height=2160
coded_width=3840
coded_height=2160
has_b_frames=1
sample_aspect_ratio=1:1
display_aspect_ratio=16:9
pix_fmt=yuv420p
level=51
color_range=tv
color_space=bt709
color_transfer=iec61966-2-4
color_primaries=bt709
chroma_location=left
timecode=N/A
refs=2
is_avc=1
nal_length_size=4
id=N/A
r_frame_rate=30000/1001
avg_frame_rate=30000/1001
time_base=1/30000
start_pts=2002
start_time=0.066733
duration_ts=210210
duration=7.007000
bit_rate=53251849
max_bit_rate=N/A
bits_per_raw_sample=8
nb_frames=210
nb_read_frames=N/A
nb_read_packets=N/A
DISPOSITION:default=1
DISPOSITION:dub=0
DISPOSITION:original=0
DISPOSITION:comment=0
DISPOSITION:lyrics=0
DISPOSITION:karaoke=0
DISPOSITION:forced=0
DISPOSITION:hearing_impaired=0
DISPOSITION:visual_impaired=0
DISPOSITION:clean_effects=0
DISPOSITION:attached_pic=0
TAG:creation_time=2016-01-09 00:44:11
TAG:language=und
TAG:handler_name=Video Media Handler
TAG:encoder=AVC Coding
[/STREAM]
[STREAM]
index=1
codec_name=pcm_s16be
codec_long_name=PCM signed 16-bit big-endian
profile=unknown
codec_type=audio
codec_time_base=1/48000
codec_tag_string=twos
codec_tag=0x736f7774
sample_fmt=s16
sample_rate=48000
channels=2
channel_layout=unknown
bits_per_sample=16
id=N/A
r_frame_rate=0/0
avg_frame_rate=0/0
time_base=1/48000
start_pts=0
start_time=0.000000
duration_ts=336336
duration=7.007000
bit_rate=1536000
max_bit_rate=N/A
bits_per_raw_sample=N/A
nb_frames=336336
nb_read_frames=N/A
nb_read_packets=N/A
DISPOSITION:default=1
DISPOSITION:dub=0
DISPOSITION:original=0
DISPOSITION:comment=0
DISPOSITION:lyrics=0
DISPOSITION:karaoke=0
DISPOSITION:forced=0
DISPOSITION:hearing_impaired=0
DISPOSITION:visual_impaired=0
DISPOSITION:clean_effects=0
DISPOSITION:attached_pic=0
TAG:creation_time=2016-01-09 00:44:11
TAG:language=und
TAG:handler_name=Sound Media Handler
[/STREAM]
[STREAM]
index=2
codec_name=unknown
codec_long_name=unknown
profile=unknown
codec_type=data
codec_time_base=0/1
codec_tag_string=rtmd
codec_tag=0x646d7472
id=N/A
r_frame_rate=0/0
avg_frame_rate=0/0
time_base=1/30000
start_pts=0
start_time=0.000000
duration_ts=210210
duration=7.007000
bit_rate=245514
max_bit_rate=N/A
bits_per_raw_sample=N/A
nb_frames=210
nb_read_frames=N/A
nb_read_packets=N/A
DISPOSITION:default=1
DISPOSITION:dub=0
DISPOSITION:original=0
DISPOSITION:comment=0
DISPOSITION:lyrics=0
DISPOSITION:karaoke=0
DISPOSITION:forced=0
DISPOSITION:hearing_impaired=0
DISPOSITION:visual_impaired=0
DISPOSITION:clean_effects=0
DISPOSITION:attached_pic=0
TAG:creation_time=2016-01-09 00:44:11
TAG:language=und
TAG:handler_name=Non-Real Time Metadata
[/STREAM]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;history&#34;&gt;History
&lt;/h3&gt;&lt;p&gt;&lt;em&gt;[Updated September 28, 2018 wording changes for clarity.]&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;footnotes&#34;&gt;Footnotes
&lt;/h3&gt;&lt;p&gt;Shout out to Divergent Media for creating such awesome software—and informative articles!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.divergentmedia.com/blog/dealing-with-codecs-on-modern-macs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dealing with Codecs on Modern Macs&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.divergentmedia.com/blog/understand-xavc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Understand XAVC&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/MPEG-4_Part_14#Data_streams&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MPEG-4 Part 14&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://superuser.com/a/130076/542965&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How do I fix Handbrake mp4s that produce Error -2041 when loaded in QuickTime?&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://forum.handbrake.fr/viewtopic.php?p=15470#p15470&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Quicktime error: invalid sample description&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/M4V&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M4V&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>Reverse Engineering XAVC-S XML Files</title>
        <link>http://localhost:1313/post/video/2016/reverse-engineering-xavcs-xml/</link>
        <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/video/2016/reverse-engineering-xavcs-xml/</guid>
        <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;Many new Sony video cameras (like the &lt;a class=&#34;link&#34; href=&#34;http://www.sony.com/electronics/handycam-camcorders/fdr-ax100&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FDR-AX100&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;http://www.sony.com/electronics/handycam-camcorders/hdr-cx900&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HDR-CX900&lt;/a&gt;) record into the XAVC-S format. XAVC-S writes to MP4 containers, and alongside them sit nice little XML files with metadata. The following is what I&amp;rsquo;ve unearthed from poking around the SD card.&lt;/p&gt;
&lt;p&gt;This post mainly serves as a log of observations.&lt;/p&gt;
&lt;h2 id=&#34;test-setup&#34;&gt;Test Setup
&lt;/h2&gt;&lt;p&gt;The AX100 has three FPS settings when recording to the XAVC-S HD file format (60p, 30p and 24p) and two when recording to XAVS-S 4K (30p and 24p).&lt;/p&gt;
&lt;p&gt;For this test there were five shots:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XAVC-S HD, 60 fps&lt;/li&gt;
&lt;li&gt;XAVC-S HD, 30 fps&lt;/li&gt;
&lt;li&gt;XAVC-S HD, 24 fps&lt;/li&gt;
&lt;li&gt;XAVC-S 4K, 30 fps&lt;/li&gt;
&lt;li&gt;XAVC-S 4K, 24 fps&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mediaproxml&#34;&gt;MEDIAPRO.XML
&lt;/h2&gt;&lt;p&gt;This file is located inside the &lt;code&gt;PRIVATE/M4ROOT/&lt;/code&gt; folder and contains a &lt;strong&gt;summary of all files on the card and their bitrates&lt;/strong&gt;. The resolution is inside the &lt;code&gt;videoType&lt;/code&gt; attribute i.e. &lt;code&gt;1920_1080&lt;/code&gt; for HD and &lt;code&gt;3840_2160&lt;/code&gt; for 4K. Note how &lt;code&gt;@L41&lt;/code&gt; and &lt;code&gt;@L42&lt;/code&gt; seem to indicate 50 Mbps and &lt;code&gt;@L51&lt;/code&gt; indicates 60 Mbps.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;MediaProfile xmlns=&amp;#34;http://xmlns.sony.net/pro/metadata/mediaprofile&amp;#34; createdAt=&amp;#34;2016-01-03T06:10:17-04:00&amp;#34; version=&amp;#34;2.10&amp;#34;&amp;gt;
	&amp;lt;Properties&amp;gt;
		&amp;lt;System systemId=&amp;#34;784B87FFFEBA9815&amp;#34; systemKind=&amp;#34;FDR-AX100&amp;#34; masterVersion=&amp;#34;XAVC-M4@1.10.00&amp;#34;/&amp;gt;
		&amp;lt;Attached mediaId=&amp;#34;1EEAD341907305C09815784B87FFFEBA&amp;#34; mediaKind=&amp;#34;AffordableMemoryCard&amp;#34; mediaName=&amp;#34;&amp;#34;/&amp;gt;
	&amp;lt;/Properties&amp;gt;
	&amp;lt;Contents&amp;gt;
		&amp;lt;Material uri=&amp;#34;./CLIP/C0001.MP4&amp;#34; type=&amp;#34;MP4&amp;#34; videoType=&amp;#34;AVC_1920_1080_HP@L42&amp;#34; audioType=&amp;#34;LPCM16&amp;#34; fps=&amp;#34;59.94p&amp;#34; dur=&amp;#34;210&amp;#34; ch=&amp;#34;2&amp;#34; aspectRatio=&amp;#34;16:9&amp;#34; offset=&amp;#34;0&amp;#34; umid=&amp;#34;060A2B340101010501010D43130000004E41F241907305CE784B87FFFEBA9815&amp;#34; status=&amp;#34;OK&amp;#34;&amp;gt;
			&amp;lt;RelevantInfo uri=&amp;#34;./CLIP/C0001M01.XML&amp;#34; type=&amp;#34;XML&amp;#34;/&amp;gt;
			&amp;lt;RelevantInfo uri=&amp;#34;./THMBNL/C0001T01.JPG&amp;#34; type=&amp;#34;JPG&amp;#34;/&amp;gt;
		&amp;lt;/Material&amp;gt;
		&amp;lt;Material uri=&amp;#34;./CLIP/C0002.MP4&amp;#34; type=&amp;#34;MP4&amp;#34; videoType=&amp;#34;AVC_1920_1080_HP@L41&amp;#34; audioType=&amp;#34;LPCM16&amp;#34; fps=&amp;#34;29.97p&amp;#34; dur=&amp;#34;165&amp;#34; ch=&amp;#34;2&amp;#34; aspectRatio=&amp;#34;16:9&amp;#34; offset=&amp;#34;0&amp;#34; umid=&amp;#34;060A2B340101010501010D431300000008DF1242907305DF784B87FFFEBA9815&amp;#34; status=&amp;#34;OK&amp;#34;&amp;gt;
			&amp;lt;RelevantInfo uri=&amp;#34;./CLIP/C0002M01.XML&amp;#34; type=&amp;#34;XML&amp;#34;/&amp;gt;
			&amp;lt;RelevantInfo uri=&amp;#34;./THMBNL/C0002T01.JPG&amp;#34; type=&amp;#34;JPG&amp;#34;/&amp;gt;
		&amp;lt;/Material&amp;gt;
		&amp;lt;Material uri=&amp;#34;./CLIP/C0003.MP4&amp;#34; type=&amp;#34;MP4&amp;#34; videoType=&amp;#34;AVC_1920_1080_HP@L41&amp;#34; audioType=&amp;#34;LPCM16&amp;#34; fps=&amp;#34;23.98p&amp;#34; dur=&amp;#34;120&amp;#34; ch=&amp;#34;2&amp;#34; aspectRatio=&amp;#34;16:9&amp;#34; offset=&amp;#34;0&amp;#34; umid=&amp;#34;060A2B340101010501010D4313000000A00A2242907305C0784B87FFFEBA9815&amp;#34; status=&amp;#34;OK&amp;#34;&amp;gt;
			&amp;lt;RelevantInfo uri=&amp;#34;./CLIP/C0003M01.XML&amp;#34; type=&amp;#34;XML&amp;#34;/&amp;gt;
			&amp;lt;RelevantInfo uri=&amp;#34;./THMBNL/C0003T01.JPG&amp;#34; type=&amp;#34;JPG&amp;#34;/&amp;gt;
		&amp;lt;/Material&amp;gt;
		&amp;lt;Material uri=&amp;#34;./CLIP/C0004.MP4&amp;#34; type=&amp;#34;MP4&amp;#34; videoType=&amp;#34;AVC_3840_2160_HP@L51&amp;#34; audioType=&amp;#34;LPCM16&amp;#34; fps=&amp;#34;29.97p&amp;#34; dur=&amp;#34;105&amp;#34; ch=&amp;#34;2&amp;#34; aspectRatio=&amp;#34;16:9&amp;#34; offset=&amp;#34;0&amp;#34; umid=&amp;#34;060A2B340101010501010D4313000000AEA46349907305C9784B87FFFEBA9815&amp;#34; status=&amp;#34;OK&amp;#34;&amp;gt;
			&amp;lt;RelevantInfo uri=&amp;#34;./CLIP/C0004M01.XML&amp;#34; type=&amp;#34;XML&amp;#34;/&amp;gt;
			&amp;lt;RelevantInfo uri=&amp;#34;./THMBNL/C0004T01.JPG&amp;#34; type=&amp;#34;JPG&amp;#34;/&amp;gt;
		&amp;lt;/Material&amp;gt;
		&amp;lt;Material uri=&amp;#34;./CLIP/C0005.MP4&amp;#34; type=&amp;#34;MP4&amp;#34; videoType=&amp;#34;AVC_3840_2160_HP@L51&amp;#34; audioType=&amp;#34;LPCM16&amp;#34; fps=&amp;#34;23.98p&amp;#34; dur=&amp;#34;84&amp;#34; ch=&amp;#34;2&amp;#34; aspectRatio=&amp;#34;16:9&amp;#34; offset=&amp;#34;0&amp;#34; umid=&amp;#34;060A2B340101010501010D4313000000B0398149907305CE784B87FFFEBA9815&amp;#34; status=&amp;#34;OK&amp;#34;&amp;gt;
			&amp;lt;RelevantInfo uri=&amp;#34;./CLIP/C0005M01.XML&amp;#34; type=&amp;#34;XML&amp;#34;/&amp;gt;
			&amp;lt;RelevantInfo uri=&amp;#34;./THMBNL/C0005T01.JPG&amp;#34; type=&amp;#34;JPG&amp;#34;/&amp;gt;
		&amp;lt;/Material&amp;gt;
	&amp;lt;/Contents&amp;gt;
&amp;lt;/MediaProfile&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;sidecar-xml&#34;&gt;Sidecar XML
&lt;/h2&gt;&lt;p&gt;These files are located inside &lt;code&gt;PRIVATE/M4ROOT/CLIP&lt;/code&gt; and sit alongside the actual XAVC-S MP4 files themselves. Interestingly, &lt;strong&gt;only FPS information is present in these sidecar XMLs&lt;/strong&gt;. Bitrate information is only present in the &lt;code&gt;M4ROOT/MEDIAPRO.XML&lt;/code&gt; file!&lt;/p&gt;
&lt;h3 id=&#34;xavc-s-hd-60-fps&#34;&gt;XAVC-S HD, 60 fps
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;tcFps=&amp;quot;30&amp;quot; halfStep=&amp;quot;true&amp;quot;&lt;/code&gt; indicates 60 fps (i.e. 30 halved)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;NonRealTimeMeta xmlns=&amp;#34;urn:schemas-professionalDisc:nonRealTimeMeta:ver.2.00&amp;#34; xmlns:lib=&amp;#34;urn:schemas-professionalDisc:lib:ver.2.00&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; lastUpdate=&amp;#34;2016-01-03T06:10:57-04:00&amp;#34;&amp;gt;
	&amp;lt;TargetMaterial umidRef=&amp;#34;060A2B340101010501010D43130000004E41F241907305CE784B87FFFEBA9815&amp;#34; status=&amp;#34;OK&amp;#34;/&amp;gt;
	&amp;lt;Duration value=&amp;#34;210&amp;#34;/&amp;gt;
	&amp;lt;LtcChangeTable tcFps=&amp;#34;30&amp;#34; halfStep=&amp;#34;true&amp;#34;&amp;gt;
		&amp;lt;LtcChange frameCount=&amp;#34;0&amp;#34; value=&amp;#34;40000000&amp;#34; status=&amp;#34;increment&amp;#34;/&amp;gt;
		&amp;lt;LtcChange frameCount=&amp;#34;209&amp;#34; value=&amp;#34;54830000&amp;#34; status=&amp;#34;end&amp;#34;/&amp;gt;
	&amp;lt;/LtcChangeTable&amp;gt;
	&amp;lt;CreationDate value=&amp;#34;2016-01-03T06:10:57-04:00&amp;#34;/&amp;gt;
	&amp;lt;Device manufacturer=&amp;#34;Sony&amp;#34; modelName=&amp;#34;FDR-AX100&amp;#34; serialNo=&amp;#34;1234567890&amp;#34;/&amp;gt;
	&amp;lt;RecordingMode type=&amp;#34;normal&amp;#34; cacheRec=&amp;#34;false&amp;#34;/&amp;gt;
&amp;lt;/NonRealTimeMeta&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;xavc-s-hd-30-fps&#34;&gt;XAVC-S HD, 30 fps
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;tcFps=&amp;quot;30&amp;quot; halfStep=&amp;quot;false&amp;quot;&lt;/code&gt; indicates 30 fps (i.e. 30 divided by 1)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;NonRealTimeMeta xmlns=&amp;#34;urn:schemas-professionalDisc:nonRealTimeMeta:ver.2.00&amp;#34; xmlns:lib=&amp;#34;urn:schemas-professionalDisc:lib:ver.2.00&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; lastUpdate=&amp;#34;2016-01-03T06:11:40-04:00&amp;#34;&amp;gt;
	&amp;lt;TargetMaterial umidRef=&amp;#34;060A2B340101010501010D431300000008DF1242907305DF784B87FFFEBA9815&amp;#34; status=&amp;#34;OK&amp;#34;/&amp;gt;
	&amp;lt;Duration value=&amp;#34;165&amp;#34;/&amp;gt;
	&amp;lt;LtcChangeTable tcFps=&amp;#34;30&amp;#34; halfStep=&amp;#34;false&amp;#34;&amp;gt;
		&amp;lt;LtcChange frameCount=&amp;#34;0&amp;#34; value=&amp;#34;40000000&amp;#34; status=&amp;#34;increment&amp;#34;/&amp;gt;
		&amp;lt;LtcChange frameCount=&amp;#34;164&amp;#34; value=&amp;#34;54050000&amp;#34; status=&amp;#34;end&amp;#34;/&amp;gt;
	&amp;lt;/LtcChangeTable&amp;gt;
	&amp;lt;CreationDate value=&amp;#34;2016-01-03T06:11:40-04:00&amp;#34;/&amp;gt;
	&amp;lt;Device manufacturer=&amp;#34;Sony&amp;#34; modelName=&amp;#34;FDR-AX100&amp;#34; serialNo=&amp;#34;1234567890&amp;#34;/&amp;gt;
	&amp;lt;RecordingMode type=&amp;#34;normal&amp;#34; cacheRec=&amp;#34;false&amp;#34;/&amp;gt;
&amp;lt;/NonRealTimeMeta&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;xavc-s-hd-24-fps&#34;&gt;XAVC-S HD, 24 fps
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;tcFps=&amp;quot;24&amp;quot; halfStep=&amp;quot;false&amp;quot;&lt;/code&gt; indicates 24 fps&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;NonRealTimeMeta xmlns=&amp;#34;urn:schemas-professionalDisc:nonRealTimeMeta:ver.2.00&amp;#34; xmlns:lib=&amp;#34;urn:schemas-professionalDisc:lib:ver.2.00&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; lastUpdate=&amp;#34;2016-01-03T06:12:00-04:00&amp;#34;&amp;gt;
	&amp;lt;TargetMaterial umidRef=&amp;#34;060A2B340101010501010D4313000000A00A2242907305C0784B87FFFEBA9815&amp;#34; status=&amp;#34;OK&amp;#34;/&amp;gt;
	&amp;lt;Duration value=&amp;#34;120&amp;#34;/&amp;gt;
	&amp;lt;LtcChangeTable tcFps=&amp;#34;24&amp;#34; halfStep=&amp;#34;false&amp;#34;&amp;gt;
		&amp;lt;LtcChange frameCount=&amp;#34;0&amp;#34; value=&amp;#34;00000000&amp;#34; status=&amp;#34;increment&amp;#34;/&amp;gt;
		&amp;lt;LtcChange frameCount=&amp;#34;119&amp;#34; value=&amp;#34;23040000&amp;#34; status=&amp;#34;end&amp;#34;/&amp;gt;
	&amp;lt;/LtcChangeTable&amp;gt;
	&amp;lt;CreationDate value=&amp;#34;2016-01-03T06:12:00-04:00&amp;#34;/&amp;gt;
	&amp;lt;Device manufacturer=&amp;#34;Sony&amp;#34; modelName=&amp;#34;FDR-AX100&amp;#34; serialNo=&amp;#34;1234567890&amp;#34;/&amp;gt;
	&amp;lt;RecordingMode type=&amp;#34;normal&amp;#34; cacheRec=&amp;#34;false&amp;#34;/&amp;gt;
&amp;lt;/NonRealTimeMeta&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;xavc-s-4k-30-fps&#34;&gt;XAVC-S 4K, 30 fps
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;tcFps=&amp;quot;30&amp;quot; halfStep=&amp;quot;false&amp;quot;&lt;/code&gt; indicates 30 fps, same as before&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;NonRealTimeMeta xmlns=&amp;#34;urn:schemas-professionalDisc:nonRealTimeMeta:ver.2.00&amp;#34; xmlns:lib=&amp;#34;urn:schemas-professionalDisc:lib:ver.2.00&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; lastUpdate=&amp;#34;2016-01-03T06:52:49-04:00&amp;#34;&amp;gt;
	&amp;lt;TargetMaterial umidRef=&amp;#34;060A2B340101010501010D4313000000AEA46349907305C9784B87FFFEBA9815&amp;#34; status=&amp;#34;OK&amp;#34;/&amp;gt;
	&amp;lt;Duration value=&amp;#34;105&amp;#34;/&amp;gt;
	&amp;lt;LtcChangeTable tcFps=&amp;#34;30&amp;#34; halfStep=&amp;#34;false&amp;#34;&amp;gt;
		&amp;lt;LtcChange frameCount=&amp;#34;0&amp;#34; value=&amp;#34;40000000&amp;#34; status=&amp;#34;increment&amp;#34;/&amp;gt;
		&amp;lt;LtcChange frameCount=&amp;#34;104&amp;#34; value=&amp;#34;54030000&amp;#34; status=&amp;#34;end&amp;#34;/&amp;gt;
	&amp;lt;/LtcChangeTable&amp;gt;
	&amp;lt;CreationDate value=&amp;#34;2016-01-03T06:52:49-04:00&amp;#34;/&amp;gt;
	&amp;lt;Device manufacturer=&amp;#34;Sony&amp;#34; modelName=&amp;#34;FDR-AX100&amp;#34; serialNo=&amp;#34;1234567890&amp;#34;/&amp;gt;
	&amp;lt;RecordingMode type=&amp;#34;normal&amp;#34; cacheRec=&amp;#34;false&amp;#34;/&amp;gt;
&amp;lt;/NonRealTimeMeta&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;xavc-s-4k-24-fps&#34;&gt;XAVC-S 4K, 24 fps
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;tcFps=&amp;quot;24&amp;quot; halfStep=&amp;quot;false&amp;quot;&lt;/code&gt; indicates 24 fps, same as before&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;NonRealTimeMeta xmlns=&amp;#34;urn:schemas-professionalDisc:nonRealTimeMeta:ver.2.00&amp;#34; xmlns:lib=&amp;#34;urn:schemas-professionalDisc:lib:ver.2.00&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; lastUpdate=&amp;#34;2016-01-03T06:53:28-04:00&amp;#34;&amp;gt;
	&amp;lt;TargetMaterial umidRef=&amp;#34;060A2B340101010501010D4313000000B0398149907305CE784B87FFFEBA9815&amp;#34; status=&amp;#34;OK&amp;#34;/&amp;gt;
	&amp;lt;Duration value=&amp;#34;84&amp;#34;/&amp;gt;
	&amp;lt;LtcChangeTable tcFps=&amp;#34;24&amp;#34; halfStep=&amp;#34;false&amp;#34;&amp;gt;
		&amp;lt;LtcChange frameCount=&amp;#34;0&amp;#34; value=&amp;#34;00000000&amp;#34; status=&amp;#34;increment&amp;#34;/&amp;gt;
		&amp;lt;LtcChange frameCount=&amp;#34;83&amp;#34; value=&amp;#34;11030000&amp;#34; status=&amp;#34;end&amp;#34;/&amp;gt;
	&amp;lt;/LtcChangeTable&amp;gt;
	&amp;lt;CreationDate value=&amp;#34;2016-01-03T06:53:28-04:00&amp;#34;/&amp;gt;
	&amp;lt;Device manufacturer=&amp;#34;Sony&amp;#34; modelName=&amp;#34;FDR-AX100&amp;#34; serialNo=&amp;#34;1234567890&amp;#34;/&amp;gt;
	&amp;lt;RecordingMode type=&amp;#34;normal&amp;#34; cacheRec=&amp;#34;false&amp;#34;/&amp;gt;
&amp;lt;/NonRealTimeMeta&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;history&#34;&gt;History
&lt;/h2&gt;&lt;p&gt;&lt;em&gt;[Updated May 14, 2018 with wording changes.]&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
